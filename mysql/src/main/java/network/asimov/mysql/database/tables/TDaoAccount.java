/*
 * This file is generated by jOOQ.
 */
package network.asimov.mysql.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import network.asimov.mysql.database.AsimovServer;
import network.asimov.mysql.database.Indexes;
import network.asimov.mysql.database.Keys;
import network.asimov.mysql.database.tables.records.TDaoAccountRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDaoAccount extends TableImpl<TDaoAccountRecord> {

    private static final long serialVersionUID = -1890220488;

    /**
     * The reference instance of <code>asimov_server.t_dao_account</code>
     */
    public static final TDaoAccount T_DAO_ACCOUNT = new TDaoAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TDaoAccountRecord> getRecordType() {
        return TDaoAccountRecord.class;
    }

    /**
     * The column <code>asimov_server.t_dao_account.id</code>. 主键
     */
    public final TableField<TDaoAccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>asimov_server.t_dao_account.address</code>. 地址
     */
    public final TableField<TDaoAccountRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "地址");

    /**
     * The column <code>asimov_server.t_dao_account.nick_name</code>. 昵称
     */
    public final TableField<TDaoAccountRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "昵称");

    /**
     * The column <code>asimov_server.t_dao_account.avatar</code>. 头像
     */
    public final TableField<TDaoAccountRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "头像");

    /**
     * The column <code>asimov_server.t_dao_account.create_time</code>. 创建时间
     */
    public final TableField<TDaoAccountRecord, Long> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建时间");

    /**
     * The column <code>asimov_server.t_dao_account.update_time</code>. 更新时间
     */
    public final TableField<TDaoAccountRecord, Long> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "更新时间");

    /**
     * Create a <code>asimov_server.t_dao_account</code> table reference
     */
    public TDaoAccount() {
        this(DSL.name("t_dao_account"), null);
    }

    /**
     * Create an aliased <code>asimov_server.t_dao_account</code> table reference
     */
    public TDaoAccount(String alias) {
        this(DSL.name(alias), T_DAO_ACCOUNT);
    }

    /**
     * Create an aliased <code>asimov_server.t_dao_account</code> table reference
     */
    public TDaoAccount(Name alias) {
        this(alias, T_DAO_ACCOUNT);
    }

    private TDaoAccount(Name alias, Table<TDaoAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private TDaoAccount(Name alias, Table<TDaoAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TDaoAccount(Table<O> child, ForeignKey<O, TDaoAccountRecord> key) {
        super(child, key, T_DAO_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AsimovServer.ASIMOV_SERVER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_DAO_ACCOUNT_PRIMARY, Indexes.T_DAO_ACCOUNT_T_ACCOUNT_ADDRESS_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TDaoAccountRecord> getPrimaryKey() {
        return Keys.KEY_T_DAO_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TDaoAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<TDaoAccountRecord>>asList(Keys.KEY_T_DAO_ACCOUNT_PRIMARY, Keys.KEY_T_DAO_ACCOUNT_T_ACCOUNT_ADDRESS_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TDaoAccount as(String alias) {
        return new TDaoAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TDaoAccount as(Name alias) {
        return new TDaoAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TDaoAccount rename(String name) {
        return new TDaoAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TDaoAccount rename(Name name) {
        return new TDaoAccount(name, null);
    }
}
